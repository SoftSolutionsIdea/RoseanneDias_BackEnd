
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}
        

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-EMPLOYEE-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

enum UserRole {
  Admin
  User
}

model Employee {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  cpf       String   @unique
  telephone String   @unique
  niver     String
  roleId    Int
  addressId Int
  timeId    Int
  wageId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role    Role    @relation(fields: [roleId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
  time    Time    @relation(fields: [timeId], references: [id])
  wage    Wage    @relation(fields: [wageId], references: [id])

  @@map("employee")
}

model Address {
  id         Int     @id @default(autoincrement())
  num        String
  complement String?
  streetId   Int
  cepId      Int
  bairroId   Int
  stateId    Int
  cityId     Int

  street Street @relation(fields: [streetId], references: [id])
  cep    Cep    @relation(fields: [cepId], references: [id])
  bairro Bairro @relation(fields: [bairroId], references: [id])
  state  State  @relation(fields: [stateId], references: [id])
  city   City   @relation(fields: [cityId], references: [id])

  Employee Employee[]
}

model Street {
  id     Int    @id @default(autoincrement())
  street String @unique

  Address Address[]
}

model Cep {
  id  Int    @id @default(autoincrement())
  cep String @unique

  Address Address[]
}

model Bairro {
  id     Int    @id @default(autoincrement())
  bairro String @unique

  Address Address[]
}

model State {
  id    Int    @id @default(autoincrement())
  state String @unique

  Address Address[]
}

model City {
  id   Int    @id @default(autoincrement())
  city String @unique

  Address Address[]
}

model Role {
  id   Int      @id @default(autoincrement())
  role UserRole @unique

  employee Employee[]
}

model Time {
  id   Int    @id @default(autoincrement())
  time String @unique

  employee Employee[]
}

model Wage {
  id     Int   @id @default(autoincrement())
  amount Float @unique

  employee Employee[]
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-PRODUCTS-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

model Products {
  id           String   @id @unique @default(uuid())
  name         String
  code         String   @unique
  size         String
  description  String
  amount       Int
  rentalId     Int
  categoryId   Int
  colorId      Int
  imageId      Int
  spentValueId Int
  statusId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  rental     Rental     @relation(fields: [rentalId], references: [id])
  category   Category   @relation(fields: [categoryId], references: [id])
  color      Color      @relation(fields: [colorId], references: [id])
  image      Image      @relation(fields: [imageId], references: [id])
  spentValue SpentValue @relation(fields: [spentValueId], references: [id])
  status     Status     @relation(fields: [statusId], references: [id])
  contractProducts ContractProduct[]
  
  @@map("products")
}

model Rental {
  id     Int    @id @default(autoincrement())
  rental String @unique

  products Products[]
}

model Category {
  id       Int    @id @default(autoincrement())
  category String @unique

  products Products[]
}

model Color {
  id    Int    @id @default(autoincrement())
  color String @unique

  products Products[]
}

model Image {
  id    Int    @id @default(autoincrement())
  image String @unique

  products Products[]
}

model SpentValue {
  id         Int @id @default(autoincrement())
  spentValue Int @unique

  products Products[]
}

model Status {
  id     Int    @id @default(autoincrement())
  status String @unique

  products Products[]
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-CLIENTS-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

model Client {
  id           String   @id @unique @default(uuid())
  name         String
  email        String   @unique
  instagram    String?  @unique
  telephone_1  String   @unique
  telephone_2  String?  @unique
  niver        String
  rg           String   @unique
  cpf_cnpj     String   @unique
  addressCliId Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  addressCli AddressCli @relation(fields: [addressCliId], references: [id])
  measurements Measurements?
  contracts Contract[]

  @@map("client")
}

model AddressCli {
  id          Int     @id @default(autoincrement())
  num         String
  complement  String?
  streetCliId Int
  cepCliId    Int
  bairroCliId Int
  stateCliId  Int
  cityCliId   Int

  streetCli StreetCli @relation(fields: [streetCliId], references: [id])
  cepCli    CepCli    @relation(fields: [cepCliId], references: [id])
  bairroCli BairroCli @relation(fields: [bairroCliId], references: [id])
  stateCli  StateCli  @relation(fields: [stateCliId], references: [id])
  cityCli   CityCli   @relation(fields: [cityCliId], references: [id])
  
  client Client[]

  @@map("addressCli")
}

model StreetCli {
  id     Int    @id @default(autoincrement())
  street String @unique

  AddressCli AddressCli[]
}

model CepCli {
  id  Int    @id @default(autoincrement())
  cep String @unique

  AddressCli AddressCli[]
}

model BairroCli {
  id     Int    @id @default(autoincrement())
  bairro String @unique

  AddressCli AddressCli[]
}

model StateCli {
  id    Int    @id @default(autoincrement())
  state String @unique

  AddressCli AddressCli[]
}

model CityCli {
  id   Int    @id @default(autoincrement())
  city String @unique

  AddressCli AddressCli[]
}

model Measurements {
  id             Int      @id @default(autoincrement())
  clientId       String   @unique
  client         Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ombro          Float?
  busto          Float?
  coOmbroCintura Float?
  coOmbroCos     Float?
  coCorpoTQC     Float?
  cintura        Float?
  cos            Float?
  quadril        Float?
  SaiaCurta      Float?
  SaiaLonga      Float?
  Short          Float?
  Calca          Float?
  Vestido        Float?
  Manga          Float?
  punho          Float?
  Frente         Float?
  OmbroAOmbro    Float?

  @@map("measurements")
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-CONTRACTS-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

enum UserStatus {
  Pending
  Completed
  Canceled
}

model Contract {
  id                 Int @id @default(autoincrement())
  contractDate       DateTime       @default(now())
  eventDate          DateTime //
  seller             String //
  occasion           String //
  eventLocation      String //
  eventName          String //
  observations       String?
  discountPercentage Float?
  createdAt          DateTime @default(now())
  endDate            DateTime?
  
  clientId           String
  client             Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  statusId           Int
  contractStatus     ContractStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)

  products           ContractProduct[]
  payment            ContractPayment[]
}

model ContractProduct {
  id              Int @id @default(autoincrement())
  productId       String
  testDate        DateTime
  time            String
  provaOk         Boolean //
  withdrawalDate  DateTime
  returnDate      DateTime
  withdrawnDay    DateTime
  returnedDay     DateTime

  contractId      Int
  contract        Contract @relation(fields: [contractId], references: [id])

  products        Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ContractPayment {
  id              Int @id @default(autoincrement())
  paymentMethod   String //
  paymentDate     DateTime
  flag            String? //
  paymentAmount   Float  //
  contractId      Int
  contract        Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}






model ContractStatus {
  id Int @id @default(autoincrement())
  status UserStatus @unique

  contracts Contract[]
}
